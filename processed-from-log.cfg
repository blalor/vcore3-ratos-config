[board_pins octopus_11_tmc2209]
aliases = 
	
	x_step_pin=PF13,   x_dir_pin=PF12,   x_enable_pin=PF14,   x_uart_pin=PC4,   x_diag_pin=PG6,   x_endstop_pin=PG6,
	y_step_pin=PG0,   y_dir_pin=PG1,   y_enable_pin=PF15,   y_uart_pin=PD11,   y_diag_pin=PG9,   y_endstop_pin=PG9,
	z0_step_pin=PC13,  z0_dir_pin=PF0,  z0_enable_pin=PF1,  z0_uart_pin=PE4,  z0_diag_pin=null,
	z1_step_pin=PE2,  z1_dir_pin=PE3,  z1_enable_pin=PD4,  z1_uart_pin=PE1,  z1_diag_pin=null,
	z2_step_pin=PE6,  z2_dir_pin=PA14,  z2_enable_pin=PE0,  z2_uart_pin=PD3,  z2_diag_pin=null,
	e_step_pin=PF11,   e_dir_pin=PG3,   e_enable_pin=PG5,   e_uart_pin=PC6,   e_diag_pin=null,   e_heater_pin=PA2,  e_sensor_pin=PF4,
	
	adxl345_cs_pin=PA15,
	
	bltouch_sensor_pin=PB7,  bltouch_control_pin=PB6,
	probe_pin=PB7,
	
	fan_part_cooling_pin=PA8,
	fan_toolhead_cooling_pin=PE5,
	fan_controller_board_pin=PD12,
	
	heater_bed_heating_pin=PA1,
	heater_bed_sensor_pin=PF3,
	
	
	
	EXP1_1=PE8, EXP1_3=PE9, EXP1_5=PE12, EXP1_7=PE14, EXP1_9=<GND>,
	EXP1_2=PE7, EXP1_4=PE10, EXP1_6=PE13, EXP1_8=PE15, EXP1_10=<5V>,
	
	EXP2_1=PA6, EXP2_3=PB1, EXP2_5=PB2, EXP2_7=PC15,  EXP2_9=<GND>,
	EXP2_2=PA5, EXP2_4=PA4, EXP2_6=PA7, EXP2_8=<RST>, EXP2_10=PC5,

[temperature_sensor Octopus]
sensor_type = temperature_mcu
min_temp = 0
max_temp = 100

[printer]
kinematics = corexy
max_velocity = 1000
max_accel = 4400
max_z_velocity = 20
max_z_accel = 150
square_corner_velocity = 5

[mcu]
baud = 250000
serial = /dev/serial/by-id/usb-Klipper_stm32f446xx_btt-octopus-11-if00

[idle_timeout]
gcode = 
	{% if printer.webhooks.state|lower == 'ready' %}
	{% if printer.pause_resume.is_paused|lower == 'false' %}
	M117 Idle timeout reached
	TURN_OFF_HEATERS
	M84
	{% endif %}
	{% endif %}
timeout = 7200

[virtual_sdcard]
path = ~/printer_data/gcodes

[display_status]

[pause_resume]

[exclude_object]

[force_move]
enable_force_move = True

[respond]

[skew_correction]

[resonance_tester]
accel_chip = adxl345
probe_points = 
	200,200,20

[input_shaper]
shaper_type_x = mzv
shaper_freq_x = 66.8
shaper_type_y = mzv
shaper_freq_y = 37.4

[temperature_sensor raspberry_pi]
sensor_type = temperature_host

[temperature_sensor chamber]
sensor_type = EPCOS 100K B57560G104F
sensor_pin = PF5
gcode_id = F

[temperature_sensor motor_l]
sensor_type = EPCOS 100K B57560G104F
sensor_pin = PF7
gcode_id = ML

[temperature_sensor motor_r]
sensor_type = EPCOS 100K B57560G104F
sensor_pin = PF6
gcode_id = MR

[heater_bed]
heater_pin = heater_bed_heating_pin
sensor_pin = heater_bed_sensor_pin
sensor_type = Generic 3950
min_temp = 0
max_temp = 120
pwm_cycle_time = 0.0083
control = pid
pid_kp = 64.914
pid_ki = 2.186
pid_kd = 481.989

[fan]
shutdown_speed = 1.0
pin = ebb:PA0

[heater_fan toolhead_cooling_fan]
fan_speed = 1
pin = ebb:PA1

[controller_fan controller_fan]
pin = fan_controller_board_pin

[stepper_x]
step_pin = x_step_pin
dir_pin = x_dir_pin
enable_pin = !x_enable_pin
rotation_distance = 40
microsteps = 64
homing_speed = 50
homing_retract_dist = 5.0
homing_positive_dir = true
position_min = -1
position_max = 411.5
position_endstop = 411.5
endstop_pin = !ebb:PB5

[tmc2209 stepper_x]
uart_pin = x_uart_pin
run_current = 1.6
stealthchop_threshold = 0
interpolate = False
driver_tbl = 2
driver_toff = 3
driver_hend = 0
driver_hstrt = 6

[stepper_y]
step_pin = y_step_pin
dir_pin = y_dir_pin
enable_pin = !y_enable_pin
rotation_distance = 40
microsteps = 64
homing_speed = 50
homing_retract_dist = 5.0
homing_positive_dir = true
endstop_pin = ^!y_endstop_pin
position_min = -4
position_max = 397
position_endstop = 397

[tmc2209 stepper_y]
uart_pin = y_uart_pin
run_current = 1.6
stealthchop_threshold = 0
interpolate = False
driver_tbl = 2
driver_toff = 3
driver_hend = 0
driver_hstrt = 6

[stepper_z]
step_pin = z0_step_pin
dir_pin = !z0_dir_pin
enable_pin = !z0_enable_pin
rotation_distance = 4
microsteps = 16
position_min = -5
homing_speed = 10
endstop_pin = probe:z_virtual_endstop
homing_retract_dist = 0
position_max = 400

[tmc2209 stepper_z]
uart_pin = z0_uart_pin
run_current = 1.6
stealthchop_threshold = 0
interpolate = False
driver_tbl = 2
driver_toff = 3
driver_hend = 0
driver_hstrt = 6

[stepper_z1]
step_pin = z1_step_pin
dir_pin = !z1_dir_pin
enable_pin = !z1_enable_pin
rotation_distance = 4
microsteps = 16

[tmc2209 stepper_z1]
uart_pin = z1_uart_pin
run_current = 1.6
stealthchop_threshold = 0
interpolate = False
driver_tbl = 2
driver_toff = 3
driver_hend = 0
driver_hstrt = 6

[stepper_z2]
step_pin = z2_step_pin
dir_pin = !z2_dir_pin
enable_pin = !z2_enable_pin
rotation_distance = 4
microsteps = 16

[tmc2209 stepper_z2]
uart_pin = z2_uart_pin
run_current = 1.6
stealthchop_threshold = 0
interpolate = False
driver_tbl = 2
driver_toff = 3
driver_hend = 0
driver_hstrt = 6

[extruder]
microsteps = 64
rotation_distance = 7.87542
filament_diameter = 1.750
max_extrude_only_velocity = 60
max_extrude_cross_section = 50
max_extrude_only_distance = 200
nozzle_diameter = 0.4
sensor_type = ATC Semitec 104GT-2
min_extrude_temp = 170
min_temp = 0
max_temp = 315
pressure_advance = 0.03
control = pid
pid_kp = 24.447
pid_ki = 1.442
pid_kd = 103.595
step_pin = ebb:PD0
dir_pin = ebb:PD1
enable_pin = !ebb:PD2
heater_pin = ebb:PA2
sensor_pin = ebb:PA3
pullup_resistor = 4640

[tmc2209 extruder]
run_current = 0.5
stealthchop_threshold = 0
interpolate = False
uart_pin = ebb:PA15

[scanner]
canbus_uuid = 1c6b59954640
x_offset = 0
y_offset = 17
backlash_comp = 0.00233
calibration_method = touch
sensor = cartographer
sensor_alt = carto
mesh_runs = 2
lift_speed = 30
scanner_touch_threshold = 3500

[temperature_sensor Cartographer_MCU]
sensor_type = temperature_mcu
sensor_mcu = scanner
min_temp = 0
max_temp = 105

[adxl345]
cs_pin = scanner:PA3
spi_bus = spi1

[safe_z_home]
home_xy_position = 200, 200
speed = 300
z_hop = 10

[z_tilt]
speed = 400
z_positions = 
	0,0
	200,400
	400,0
points = 
	20,7
	203,372
	388,7
horizontal_move_z = 2
retry_tolerance = 0.00750
retries = 3

[bed_mesh]
speed = 1000
horizontal_move_z = 5
mesh_min = 20, 27
mesh_max = 385, 370
probe_count = 30, 30
algorithm = bicubic
zero_reference_position = 200, 200

[firmware_retraction]
retract_speed = 40
unretract_extra_length = 0
unretract_speed = 40
retract_length = 0.5

[gcode_macro G0]
rename_existing = G0.1
gcode = 
	{% if params.F is defined and params.F == "0" %}
	{ action_respond_info("WARNING: G1 F0 workaround!") }
	{% endif %}
	
	{% set F = params.F if params.F is defined and params.F != "0" else None %}
	
	G0.1 {% for k, v in params.items() if k not in "FG" %}{ k }{ v } {% endfor %} { "F" + F if F }

[gcode_macro _REPORT_POSITION]
gcode = 
	{ action_respond_info("[%s] toolhead position: %.2f, %.2f, %.2f" % (params.REF, printer.toolhead.position.x, printer.toolhead.position.y, printer.toolhead.position.z)) }

[gcode_macro CENTER]
gcode = 
	G90
	G0 X{ printer.toolhead.axis_maximum.x/2 } Y{ printer.toolhead.axis_maximum.y/2 } Z{ printer.toolhead.axis_maximum.z/2 } F7200

[gcode_macro LAZY_HOME]
gcode = 
	{% if printer.toolhead.homed_axes != 'XYZ' %}
	G28
	
	{% if printer.configfile.settings.stepper_z.endstop_pin == "probe:z_virtual_endstop" %}
	G0 Z5 F3000
	{% endif %}
	{% endif %}

[gcode_macro THOROUGHLY_HOME]
gcode = 
	G28
	Z_TILT_ADJUST
	G28 Z

[gcode_macro RESET_VELOCITY]
gcode = 
	{% set cfg_velocity               = printer.configfile.settings.printer.max_velocity | float %}
	{% set cfg_accel                  = printer.configfile.settings.printer.max_accel | float %}
	{% set cfg_square_corner_velocity = printer.configfile.settings.printer.square_corner_velocity | float %}
	{% set cfg_min_cruise_ratio       = printer.configfile.settings.printer.minimum_cruise_ratio | float %}
	
	SET_VELOCITY_LIMIT VELOCITY={cfg_velocity} ACCEL={cfg_accel} SQUARE_CORNER_VELOCITY={cfg_square_corner_velocity} MINIMUM_CRUISE_RATIO={cfg_min_cruise_ratio}

[gcode_macro SEARCH_VARS]
gcode = 
	{% set search = params.S|lower %}
	{% set ns = namespace() %}
	{% for item in printer  %}
	{% if ' ' in item %}
	{% set ns.path = ['printer', "['%s']" % (item), ''] %}
	{% else %}
	{% set ns.path = ['printer.', item, ''] %}
	{% endif %}
	
	{% if search in ns.path|lower %}
	{ action_respond_info(ns.path|join) }
	{% endif %}
	
	{% if printer[item].items() %}
	{% for childkey, child in printer[item].items() recursive %}
	{% set ns.path = ns.path[:loop.depth|int + 1] %}
	
	{% if ' ' in childkey %}
	{% set null = ns.path.append("['%s']" % (childkey)) %}
	{% else %}
	{% set null = ns.path.append(".%s" % (childkey)) %}
	{% endif %}
	
	{% if child is mapping  %}
	{ loop(child.items()) }
	{% else %}
	{% if search in ns.path|lower %}
	{ action_respond_info("%s : %s" % (ns.path|join, child)) }
	{% endif %}
	{% endif %}
	
	{% endfor %}
	{% endif %}
	{% endfor %}

[gcode_macro FIRST_LAYER_CALIBRATION]
gcode = 
	{% set EXTRUDER_TEMP = params.EXTRUDER | float %}
	{% set BED_TEMP = params.BED| float %}
	
	START_PRINT EXTRUDER_TEMP={ EXTRUDER_TEMP } BED_TEMP={ BED_TEMP } PRINT_MIN=30,30 PRINT_MAX=90,90
	
	
	
	SDCARD_PRINT_FILE FILENAME=calibration/first_layer_no_temp.gcode

[gcode_macro _SET_FAN_SPEED]
gcode = 
	M106 S{ (params.PERCENT | float) * 255 / 100 }

[gcode_macro _RUNOUT_INFO]
gcode = 
	{% if 'filament_switch_sensor lgx' in printer.configfile.settings %}
	{% set enable = printer['filament_switch_sensor lgx'].enabled %}
	{% set detect = printer['filament_switch_sensor lgx'].filament_detected %}
	
	{ action_respond_info("RUNOUT Motion Sensor:
	Enabled: %s
	Detect Filament: %s" % (enable|lower, detect|lower)) }
	{% endif %}

[gcode_macro M115]
description = Print host and mcu version
rename_existing = M115.1
gcode = 
	{% set parameters = namespace(output = 'mcu build version: \n') %}
	{% for name1 in printer %}
	{% for name2 in printer[name1] %}
	{% set show = ['mcu_version'] %}
	{% if name2 is in show %}
	{% set param = "%s: %s" % (name1, printer[name1][name2]) %}
	{% set parameters.output = parameters.output +  param + "\n" %}
	{% endif %}
	{% endfor %}
	{% endfor %}
	
	{ action_respond_info(parameters.output) }
	M115.1

[gcode_macro M117]
description = displays a message on the display and echos it to the console
rename_existing = M117.1
gcode = 
	
	M117.1 { "_ " if rawparams[0].isdigit() }{ rawparams }
	
	{% if rawparams %}
	{ action_respond_info(rawparams) }
	{% endif %}

[gcode_macro HEAT_SOAK]
description = heats the bed for a while
variable_target_temp = 0
variable_stage = None
variable_check_interval = 10
variable_soak_time_remaining = 0
variable_total_time_elapsed = 0
gcode = 
	{% set TARGET = params.TARGET | default(0) | float %}
	{% set DURATION = (params.DURATION | default(0) | int) * 60 %}
	
	SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=target_temp         VALUE={ TARGET }
	SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=stage               VALUE="'heating'"
	SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=soak_time_remaining VALUE={ DURATION }
	SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=total_time_elapsed  VALUE=0
	
	SET_HEATER_TEMPERATURE HEATER=extruder TARGET=0
	
	SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={ TARGET }
	
	_SET_FAN_SPEED PERCENT=50
	
	G28
	_PARK LOCATION=center
	G0 Z{ printer.configfile.settings.safe_z_home.z_hop } F6000
	
	M84
	
	M117 heat soaking for { params.DURATION }m @ { TARGET }
	UPDATE_DELAYED_GCODE ID=heat_soaker DURATION={ check_interval }

[gcode_macro CANCEL_HEAT_SOAK]
description = cancels an in-progress HEAT_SOAK cycle
gcode = 
	SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=stage VALUE="'cancel'"
	UPDATE_DELAYED_GCODE ID=heat_soaker DURATION=1

[delayed_gcode heat_soaker]
gcode = 
	{% set heat_soak = printer['gcode_macro HEAT_SOAK'] %}
	
	
	{% set total_time_elapsed = heat_soak.total_time_elapsed + heat_soak.check_interval %}
	SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=total_time_elapsed VALUE={ total_time_elapsed }
	
	{% set stage = heat_soak.stage %}
	{% if stage == "heating" and printer.heater_bed.temperature >= heat_soak.target_temp %}
	{% set stage = "soaking" %}
	{% endif %}
	
	{% if stage == "soaking" %}
	
	{% set soak_time_remaining = [heat_soak.soak_time_remaining - heat_soak.check_interval, 0] | max %}
	SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=soak_time_remaining VALUE={ soak_time_remaining }
	
	{% if soak_time_remaining == 0 %}
	{% set stage = "done" %}
	{% endif %}
	{% endif %}
	
	SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=stage VALUE="'{ stage }'"
	
	{% if stage in ("done", "cancel") %}
	
	{% if stage == "cancel" %}
	{% set stage = "done" %}
	TURN_OFF_HEATERS
	M107
	
	M117 { "soak cancelled after ~%.1fm" | format(total_time_elapsed / 60.0) }
	{% else %}
	M117 { "soak complete after %.1fm" | format(total_time_elapsed / 60.0) }
	{% endif %}
	
	
	SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=target_temp         VALUE=0
	SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=soak_time_remaining VALUE=0
	SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=total_time_elapsed  VALUE=0
	
	{% else %}
	
	{% if total_time_elapsed % 90 == 0 %}
	
	{% if stage == "heating" %}
	M117 { "heating -- %.1fm elapsed" | format(total_time_elapsed / 60.0) }
	{% elif stage == "soaking" %}
	M117 { "soaking -- %.1fm remaining" | format(soak_time_remaining / 60.0) }
	{% endif %}
	{% endif %}
	
	
	UPDATE_DELAYED_GCODE ID=heat_soaker DURATION={ heat_soak.check_interval }
	
	
	G4 P1
	
	{% endif %}

[gcode_macro USE_INFILL_SQV]
variable_square_corner_velocity = 25
gcode = 
	SET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY={ square_corner_velocity | default(printer.configfile.settings.printer.square_corner_velocity, true)}

[gcode_macro SET_INFILL_SQV]
gcode = 
	SET_GCODE_VARIABLE MACRO=USE_INFILL_SQV VARIABLE=square_corner_velocity VALUE="{ params.SQV | default(None, true) }"

[gcode_macro USE_NORMAL_SQV]
gcode = 
	SET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY={ printer.configfile.settings.printer.square_corner_velocity }

[gcode_macro RatOS]
variable_skew_profile = "CaliFlower"
variable_macro_travel_speed = 300
gcode = 
	{% for var, value in printer["gcode_macro RatOS"].items() %}
	{ action_respond_info(var ~ ": " ~ value) }
	{% endfor %}

[gcode_macro PAUSE]
rename_existing = PAUSE_BASE
variable_extrude = 1.5
gcode = 
	M117 Pausing!
	
	{% set ratOS = printer["gcode_macro RatOS"] %}
	
	SAVE_GCODE_STATE NAME=PAUSE_state
	
	
	{% set speed = ratOS.macro_travel_speed|float * 60 %}
	
	
	{% set max_z = printer.toolhead.axis_maximum.z|float %}
	{% set act_z = printer.toolhead.position.z|float %}
	{% if act_z < (max_z - 2.0) %}
	{% set z_safe = 2.0 %}
	{% else %}
	{% set z_safe = max_z - act_z %}
	{% endif %}
	
	PAUSE_BASE
	
	G91
	
	
	{% if printer.extruder.can_extrude|lower == 'true' %}
	G1 E-{ extrude } F2100
	{% else %}
	{ action_respond_info("Extruder not hot enough") }
	{% endif %}
	
	
	{% if "xyz" in printer.toolhead.homed_axes %}
	G1 Z{z_safe} F900
	_PARK LOCATION=back
	{% else %}
	{ action_respond_info("Printer not homed") }
	{% endif %}

[gcode_macro RESUME]
rename_existing = RESUME_BASE
gcode = 
	M117 Resuming!
	
	
	{% if printer.extruder.can_extrude|lower == 'true' %}
	G91
	G1 E{ printer["gcode_macro PAUSE"].extrude } F2100
	G90
	{% else %}
	{ action_respond_info("Extruder not hot enough") }
	{% endif %}
	
	RESTORE_GCODE_STATE NAME=PAUSE_state MOVE=1
	RESUME_BASE

[gcode_macro CANCEL_PRINT]
rename_existing = CANCEL_PRINT_BASE
gcode = 
	END_PRINT
	TURN_OFF_HEATERS
	CLEAR_PAUSE
	
	CANCEL_PRINT_BASE

[gcode_macro PRIME_LINE]
gcode = 
	{% set ratOS = printer["gcode_macro RatOS"] %}
	{% set speed = ratOS.macro_travel_speed|float * 60 %}
	
	
	G90
	
	
	M82
	M117 Priming nozzle...
	
	
	G1 Z5 F3000
	
	
	G1 X{printer.toolhead.axis_minimum.x + 3} Y{printer.toolhead.axis_minimum.y + 10} F{speed}
	
	
	G1 Z0.3 F3000
	
	
	G92 E0
	
	
	G91
	
	
	G1 E10 F1200
	
	{% for _e in range(0, 160, ((0.2 * 4) * 10) | int) %}
	G1 X1 E0.2 F1200
	G1 Y1 E0.2 F1200
	G1 X-1 E0.2 F1200
	G1 Y1 E0.2 F1200
	{% endfor %}
	
	G1 E-0.8 F3000
	G1 Y-0.5 E0 F{speed}
	G1 Y0.5 E0 F{speed}
	G1 X5 E0 F{speed}
	G1 E0.6 F1500
	
	
	
	G90
	
	
	G92 E0

[gcode_macro _PARK]
gcode = 
	{% set ratOS = printer["gcode_macro RatOS"] %}
	{% set speed = ratOS.macro_travel_speed|float * 60 %}
	
	
	{% if params.X %}
	{% if params.X|float >= printer.toolhead.axis_minimum.x + 5 and params.X|float <= printer.toolhead.axis_maximum.x - 5 %}
	{% set safe_x = params.X|float %}
	{% else %}
	{ action_respond_info('The requested X co-ordinate is outside the defined axis bounds - using defaults') }
	{% set safe_x = printer.toolhead.axis_maximum.x / 2 %}
	{% endif %}
	{% else %}
	{% set safe_x = printer.toolhead.axis_maximum.x / 2 %}
	{% endif %}
	
	
	{% if params.LOCATION|default('back')|lower == 'back' %}
	{% set y = printer.toolhead.axis_maximum.y - 5 %}
	{% elif params.LOCATION|lower == 'front' %}
	{% set y = printer.toolhead.axis_minimum.y + 5 %}
	{% elif params.LOCATION|lower == 'center' %}
	{% set y = printer.toolhead.axis_maximum.y / 2 %}
	{% endif %}
	
	
	G90
	
	
	G0 X{safe_x} Y{y} F{speed}

[gcode_macro MultiMaterial]
variable_previous_tool = None
variable_current_tool = 0
gcode = 
	RESPOND TYPE=command MSG="{ printer['gcode_macro MultiMaterial'] }"

[gcode_macro M600]
description = change filament
gcode = 
	{% set mm = printer["gcode_macro MultiMaterial"] %}
	
	{% if mm.previous_tool != mm.current_tool %}
	PAUSE
	M117 Please load new filament and resume
	{% endif %}

[gcode_macro SET_TOOL]
gcode = 
	{% set mm = printer["gcode_macro MultiMaterial"] %}
	
	SET_GCODE_VARIABLE MACRO=MultiMaterial VARIABLE=previous_tool VALUE={ mm.current_tool }
	SET_GCODE_VARIABLE MACRO=MultiMaterial VARIABLE=current_tool  VALUE={ params.TOOL }

[gcode_macro T0]
description = switch to tool 0
gcode = 
	SET_TOOL TOOL=0

[gcode_macro T1]
description = switch to tool 1
gcode = 
	SET_TOOL TOOL=1

[gcode_macro M900]
description = marlin linear advance
gcode = 
	{ "" }

[gcode_macro UNLOAD_FILAMENT]
gcode = 
	SAVE_GCODE_STATE NAME=unload_state
	
	G91
	
	{% if params.TEMP is defined or printer.extruder.can_extrude|lower == 'false' %}
	M117 Heating...
	
	
	M104 S{params.TEMP|default(220, true)}
	TEMPERATURE_WAIT SENSOR=extruder MINIMUM={params.TEMP|default(220, true)}
	{% endif %}
	
	M117 Unloading filament...
	
	
	G0 E-5 F3600
	
	
	G4 P3000
	
	
	G0 E5 F3600
	
	
	G0 E-15 F3600
	
	
	G0 E-130 F300
	
	M117 Filament unloaded!
	
	RESTORE_GCODE_STATE NAME=unload_state

[gcode_macro LOAD_FILAMENT]
gcode = 
	SAVE_GCODE_STATE NAME=load_state
	
	G91
	
	
	{% if params.TEMP is defined or printer.extruder.can_extrude|lower == 'false' %}
	M117 Heating...
	M104 S{params.TEMP|default(220, true)}
	TEMPERATURE_WAIT SENSOR=extruder MINIMUM={params.TEMP|default(220, true)}
	{% endif %}
	
	M117 Loading filament...
	
	
	{% if 'filament_switch_sensor lgx' in printer.configfile.settings %}
	SET_FILAMENT_SENSOR SENSOR=lgx ENABLE=0
	{% endif %}
	
	
	G0 E100 F600
	
	
	G4 P1000
	
	
	G0 E40 F100
	
	
	M400
	
	M117 Filament loaded!
	
	RESTORE_GCODE_STATE NAME=load_state

[gcode_macro START_PRINT]
variable_first_layer_min_xy = None
variable_first_layer_max_xy = None
gcode = 
	{% set ratOS = printer["gcode_macro RatOS"] %}
	
	{% set travel_speed = ratOS.macro_travel_speed|float * 60 %}
	
	{% set extruder_temp = params.EXTRUDER_TEMP | default(printer.extruder.target, true)   | float %}
	{% set bed_temp      = params.BED_TEMP      | default(printer.heater_bed.target, true) | float %}
	
	
	
	
	
	
	
	
	
	
	
	
	{% set nozzle_preheat_temp = 150 %}
	
	
	{% set semm = params.SEMM == "true" %}
	
	
	
	SET_TOOL TOOL=0
	
	CLEAR_PAUSE
	
	
	RESET_VELOCITY
	
	
	SET_PRESSURE_ADVANCE ADVANCE={ printer.configfile.settings.extruder.pressure_advance } SMOOTH_TIME={ printer.configfile.settings.extruder.pressure_advance_smooth_time }
	
	
	SET_GCODE_OFFSET X=0 Y=0 Z=0
	
	
	M220 S100
	M221 S100
	
	
	M107
	
	
	UPDATE_DELAYED_GCODE ID=heat_soaker DURATION=0
	
	
	
	G21
	
	
	G90
	
	
	M82
	
	
	G28
	
	
	
	_PARK LOCATION=center
	G0 Z{ printer.configfile.settings.safe_z_home.z_hop } F6000
	
	
	M117 Heating bed...
	
	
	M140 S{ bed_temp }
	TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={ bed_temp * 0.8 }
	
	
	M117 Preheating nozzle...
	M104 S{ nozzle_preheat_temp }
	
	
	M117 Finishing bed heating...
	M190 S{ bed_temp }
	
	
	M117 Finishing nozzle preheating...
	M109 S{ nozzle_preheat_temp }
	
	
	M117 Adjusting for tilt...
	G28 Z
	Z_TILT_ADJUST
	
	
	M117 Rehoming after tilt adjustment...
	G28 Z
	
	M117 Bed mesh calibration...
	
	SET_GCODE_VARIABLE MACRO=START_PRINT VARIABLE=first_layer_min_xy VALUE="{ params.PRINT_MIN | default(None, true) }"
	SET_GCODE_VARIABLE MACRO=START_PRINT VARIABLE=first_layer_max_xy VALUE="{ params.PRINT_MAX | default(None, true) }"
	
	BED_MESH_CALIBRATE
	
	SET_GCODE_VARIABLE MACRO=START_PRINT VARIABLE=first_layer_min_xy VALUE=None
	SET_GCODE_VARIABLE MACRO=START_PRINT VARIABLE=first_layer_max_xy VALUE=None
	
	M117 Clean nozzle now!
	G0 X{ printer.toolhead.axis_maximum.x/4 } Y0 Z50 F{ travel_speed }
	G4 P10000
	
	M117 Calibrating Probe/Nozzle offset...
	CARTOGRAPHER_TOUCH
	
	
	M117 Heating extruder...
	M104 S{ extruder_temp }
	
	
	G1 X0 Y0 F{ travel_speed }
	
	
	M109 S{ extruder_temp }
	
	
	{% if semm %}
	M400
	PAUSE
	M117 Load starting filament
	
	
	
	{% endif %}
	
	PRIME_LINE
	
	{% if 'filament_switch_sensor lgx' in printer.configfile.settings %}
	SET_FILAMENT_SENSOR SENSOR=lgx ENABLE=1
	{% endif %}
	
	{% if ratOS.skew_profile is defined %}
	SKEW_PROFILE LOAD={ ratOS.skew_profile }
	{% endif %}
	
	M117 Printing...
	
	M83
	G92 E0

[gcode_macro END_PRINT]
gcode = 
	{% set ratOS = printer["gcode_macro RatOS"] %}
	
	
	{% set max_z = printer.toolhead.axis_maximum.z|float %}
	{% set act_z = printer.toolhead.position.z|float %}
	{% if act_z < (max_z - 2.0) %}
	{% set z_safe = 2.0 %}
	{% else %}
	{% set z_safe = max_z - act_z %}
	{% endif %}
	
	
	M104 S0
	
	
	M140 S0
	
	
	G91
	
	
	G1 E-2 F3600
	
	
	G0 Z{ z_safe } F3600
	
	
	G1 E-2 F3600
	
	_PARK LOCATION=back
	{% if act_z < max_z/2 %}
	G90
	G0 Z{ max_z/2 } F3600
	{% endif %}
	
	
	{% if ratOS.skew_profile is defined %}
	SET_SKEW CLEAR=1
	{% endif %}
	
	
	M84
	
	
	M107
	M117 Done.

[gcode_shell_command generate_shaper_graph_x]
command = /home/blalor/klipper-config/config/scripts/generate-shaper-graph-x.sh
timeout = 60.
verbose = True

[gcode_shell_command generate_shaper_graph_y]
command = /home/blalor/klipper-config/config/scripts/generate-shaper-graph-y.sh
timeout = 60.
verbose = True

[gcode_shell_command generate_belt_tension_graph]
command = /home/blalor/klipper-config/config/scripts/generate-belt-tension-graph.sh
timeout = 90.
verbose = True

[gcode_shell_command compile_binaries]
command = /home/blalor/klipper-config/config/scripts/compile-binaries.sh
timeout = 600.

[gcode_shell_command change_hostname]
command = /home/blalor/klipper-config/config/scripts/change-hostname.sh
timeout = 10.

[gcode_shell_command delete_and_restore_printer_data_dirs]
command = /home/blalor/klipper-config/config/scripts/delete-and-restore-printer-data.sh
timeout = 10.

[gcode_macro DELETE_AND_RESTORE_PRINTER_DATA_DIRS]
gcode = 
	RUN_SHELL_COMMAND CMD=delete_and_restore_printer_data_dirs

[gcode_macro GENERATE_SHAPER_GRAPHS]
description = Genarates input shaper resonances graphs for analysis. Uses the AXIS parameter for if you only want to do one axis at a time, (eg. GENERATE_SHAPER_GRAPHS AXIS=X)
gcode = 
	{% if params.AXIS is defined %}
	{% if params.AXIS|lower == 'x' %}
	MAYBE_HOME
	TEST_RESONANCES AXIS=X
	RUN_SHELL_COMMAND CMD=generate_shaper_graph_x
	RESPOND MSG="Input shaper graph generated for the X axis. You'll find it in the input_shaper folder in the machine tab!"
	{% elif params.AXIS|lower == 'y' %}
	MAYBE_HOME
	TEST_RESONANCES AXIS=Y
	RUN_SHELL_COMMAND CMD=generate_shaper_graph_y
	RESPOND MSG="Input shaper graph generated for the Y axis. You'll find it in the input_shaper folder in the machine tab!"
	{% else %}
	{action_raise_error("Unknown axis specified. Expected X or Y.")}
	{% endif %}
	{% else %}
	MAYBE_HOME
	TEST_RESONANCES AXIS=X
	TEST_RESONANCES AXIS=Y
	RUN_SHELL_COMMAND CMD=generate_shaper_graph_x
	RUN_SHELL_COMMAND CMD=generate_shaper_graph_y
	RESPOND MSG="Input shaper graphs generated for X and Y. You'll find them in the input_shaper folder in the machine tab!"
	{% endif %}

[gcode_macro MEASURE_COREXY_BELT_TENSION]
description = Generates resonance graph used to ensure belts are equally tensioned.
gcode = 
	TEST_RESONANCES AXIS=1,1  OUTPUT=raw_data NAME=belt-tension-upper FREQ_START=25 FREQ_END=150
	TEST_RESONANCES AXIS=1,-1 OUTPUT=raw_data NAME=belt-tension-lower FREQ_START=25 FREQ_END=150
	RUN_SHELL_COMMAND CMD=generate_belt_tension_graph

[gcode_macro COMPILE_FIRMWARE]
description = Compiles firmware with currently installed klipper version for all supported RatOS boards. Note: this may take up to 10 minutes.
gcode = 
	RESPOND MSG="Compiling binaries.. This can take up to 10 minutes. Please do not turn off your Raspberry Pi!"
	RUN_SHELL_COMMAND CMD=compile_binaries
	RESPOND MSG="Firmware binaries compiled successfully! You can find them in the firmware_binaries folder in the machine tab!"

[gcode_macro CHANGE_HOSTNAME]
description = Change the hostname of your Raspberry Pi.
gcode = 
	{% if params.HOSTNAME is not defined %}
	RESPOND MSG='You have to specify a new hostname with the HOSTNAME parameter. Ex: CHANGE_HOSTNAME HOSTNAME="MY_NEW_HOSTNAME"'
	RESPOND MSG="Please note: RFCs mandate that a hostname's labels may contain only the ASCII letters 'a' through 'z' (case-insensitive), the digits '0' through '9', and the hyphen. Hostname labels cannot begin or end with a hyphen. No other symbols, punctuation characters, or blank spaces are permitted."
	{% else %}
	RUN_SHELL_COMMAND CMD=change_hostname PARAMS={params.HOSTNAME}
	{% endif %}

[mcu ebb]
canbus_uuid = 191ec2a739dc

[led ebb_status]
blue_pin = ebb:PA13

[temperature_sensor EBB]
sensor_type = temperature_mcu
sensor_mcu = ebb

[filament_switch_sensor lgx]
switch_pin = ^ebb:PB8
runout_gcode = 
	M117 Filament runout!

[scanner model default]
model_coef = 1.2733508466424863,
	1.6987117178413882,
	0.7649235809009242,
	0.3007277648395516,
	0.40772256835013854,
	0.7474979489331999,
	-0.15563640664055192,
	-0.7473609350817796,
	0.2579788694767837,
	0.4521370596026865
model_domain = 3.036439034419401e-07,3.276364058004977e-07
model_range = 0.100000,5.000000
model_temp = 26.398825
model_offset = 0.00000

[skew_correction CaliFlower]
xy_skew = 0.001401964340527476
xz_skew = 0.0
yz_skew = 0.0
