[gcode_macro _REPORT_POSITION]
gcode:
    { action_respond_info("[%s] toolhead position: %.2f, %.2f, %.2f" % (params.REF, printer.toolhead.position.x, printer.toolhead.position.y, printer.toolhead.position.z)) }

[gcode_macro CENTER]
gcode:
    G90
    G0 X{ printer.toolhead.axis_maximum.x/2 } Y{ printer.toolhead.axis_maximum.y/2 } Z{ printer.toolhead.axis_maximum.z/2 } F7200

[gcode_macro LAZY_HOME]
gcode:
    {% if printer.toolhead.homed_axes != 'XYZ' %}
        G28 ; home all

        {% if printer.configfile.settings.stepper_z.endstop_pin == "probe:z_virtual_endstop" %}
            ;; move Z so the nozzle doesn't sit on the bed while heating
            G0 Z5 F3000
        {% endif %}
    {% endif %}

[gcode_macro RESET_VELOCITY]
gcode:
    {% set cfg_velocity               = printer.configfile.settings.printer.max_velocity | float %}
    {% set cfg_accel                  = printer.configfile.settings.printer.max_accel | float %}
    {% set cfg_square_corner_velocity = printer.configfile.settings.printer.square_corner_velocity | float %}
    {% set cfg_accel_to_decel         = printer.configfile.settings.printer.max_accel_to_decel | float %}

    SET_VELOCITY_LIMIT VELOCITY={cfg_velocity} ACCEL={cfg_accel} SQUARE_CORNER_VELOCITY={cfg_square_corner_velocity} ACCEL_TO_DECEL={cfg_accel_to_decel}

; [gcode_macro PRINT_START]
; #   Use PRINT_START for the slicer starting script
; ;; some tweaks inspired by RLG
; ;; http://projects.ttlexceeded.com/3dprinting_prusaslicer_gcode.html
; gcode:
;     {% set BED_TEMP      = params.BED | default(60) | float %}
;     {% set EXTRUDER_TEMP = params.EXTRUDER | default(190) | float %}
;     {% set svv = printer.save_variables.variables %}

;     ;; cancel timer
;     UPDATE_DELAYED_GCODE ID=become_idle DURATION=0

;     SET_PIN PIN=frame_lighting VALUE=0.48

;     ;; Clears the current paused state without resuming the print. This is
;     ;; useful if one decides to cancel a print after a PAUSE. It is recommended
;     ;; to add this to your start gcode to make sure the paused state is fresh
;     ;; for each print.
;     CLEAR_PAUSE

;     ; Reset speed and extrusion rates
;     M220 S100 ; reset speed, in case it was changed using the front knob
;     M221 S100 ; flow rate

;     ; turn off fan; HEAT_SOAK leaves it on :-/
;     M107

;     ;; reset velocity limits
;     RESET_VELOCITY

;     ;; reset PA
;     SET_PRESSURE_ADVANCE ADVANCE=0

;     {% if 'firmware_retract' in printer.configfile.settings %}
;         _SET_RETRACTION RETRACT_LENGTH=0
;     {% endif %}

;     M117 homing pre-heat

;     ;; counteract the M140 command usually set in the slicer's custom g-code by
;     ;; setting the bed temperature to the *current* temperature; this keeps it
;     ;; from dropping from whatever preheated temp it may have been at while
;     ;; homing.
;     M140 S{ printer.heater_bed.temperature }

;     ;; set nozzle temp to something squishy so that any blobs don't interfere
;     ;; with homing. don't wait for settling. temp may drop from current
;     ;; temperature, but that's ok because it heats quite quickly.
;     M104 S140
;     TEMPERATURE_WAIT SENSOR=extruder MINIMUM=140

;     M117 homing
;     LAZY_HOME ;; multiple z moves in here

;     G21 ; units to mm
;     G90 ; use absolute coordinates
;     M83 ; extruder relative mode

;     M117 heating

;     ;; heat nozzle away from center of bed; probing may drive the nozzle into
;     ;; the ooze
;     G0 X{printer.toolhead.axis_maximum.x} Y1 Z100 F3600

;     ;; approach Y0 slowly to avoid opening the door...
;     G0 Y0 F60

;     ;; wait till 85% of bed temp is reached, then continue; inspired by
;     ;; https://github.com/fl0r1s/klipper_config/blob/8f3d46fc2a93d2e73ea2322e7c2df41f71ba9f51/cr10/macros.cfg
;     M140 S{BED_TEMP}      ; set bed temp
;     TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={BED_TEMP * 0.85}

;     M109 S{EXTRUDER_TEMP} ; wait for extruder temp, heating only (R not supported by Klipper)
;     M190 S{BED_TEMP}      ; wait for bed temp

;     {% if printer.bed_mesh is defined %}
;         ;; retract to avoid oozing during probing
;         G92 E0.0
;         G1 E-2 F3000

;         ;; re-home Z after heating; this moves the head per [safe_z_home]
;         G28 Z

;         ;; turn off bed heater during probing to remove the heater as a possible
;         ;; source of probe signal noise.
;         M117 probing
;         M140 S0 ;; turn off heater
;         BED_MESH_CALIBRATE METHOD=automatic
;         M117 (re)heating bed
;         M190 S{BED_TEMP} ;; resume bed temperature
;     {% endif %}

;     ;; apply gcode offset for configured bed surface
;     APPLY_BED_SURFACE_OFFSET

;     SET_FILAMENT_SENSOR SENSOR=btt_sfs ENABLE=1

;     ; clear buffer
;     M400

;     {% if 'skew_correction' in printer.configfile.settings %}
;         ## XZ plane
;         ## length AC 141.51
;         ## length BD 141.71
;         ## length AD 99.4

;         ## XY plane
;         ## length AC 140.55
;         ## length BD 140.61
;         ## length AD 99.4

;         ## YZ plane
;         ## length AC 141.72
;         ## length BD 141.4
;         ## length AD 99.5

;         SET_SKEW XZ=141.51,141.71,99.4 XY=140.55,140.61,99.4 YZ=141.72,141.4,99.5
;     {% endif %}

;     M117

; [gcode_macro PRINT_END]
; description: use for the slicer ending script
; gcode:
;     #  Get Boundaries
;     {% set max_x = printer.toolhead.axis_maximum.x %}
;     {% set z_safe = [printer.toolhead.axis_maximum.z, (printer.toolhead.position.z + 30)] | min %}

;     G92 E0                         ; zero the extruder
;     G1 E-4.0 F3600                 ; retract filament

;     G90                            ; absolute positioning
;     G0 Z{ z_safe } F3600           ; move nozzle up
;     G0 X{ max_x } Y1 F20000        ; park nozzle where camera can see the bed
;     G0 Y0 F60                      ; approach Y0 slowly to avoid opening the door...

;     M400                           ; wait for buffer to clear

;     TURN_OFF_HEATERS
;     M107                           ; turn off fan

;     M84                            ; disable steppers

;     {% if printer.bed_mesh is defined %}
;         BED_MESH_CLEAR
;     {% endif %}

;     {% if 'skew_correction' in printer.configfile.settings %}
;         SET_SKEW CLEAR=1
;     {% endif %}

;     ;; turn off the light after 1m (delay to allow hass to get a capture)
;     UPDATE_DELAYED_GCODE ID=become_idle DURATION=60

; [gcode_macro LOAD_FILAMENT]
; gcode:
;    M83                            ; set extruder to relative
;    G1 E410 F1800                  ; quickly load filament to down bowden
;    G1 E30 F300                    ; slower extrusion for hotend path
;    G1 E15 F150                    ; prime nozzle with filament
;    M82                            ; set extruder to absolute

; [gcode_macro UNLOAD_FILAMENT]
; gcode:
;    M83                            ; set extruder to relative
;    G1 E10 F300                    ; extrude a little to soften tip
;    G1 E-380 F1800                 ; retract filament completely
;    M82                            ; set extruder to absolute

; [gcode_macro test_speed_fast]
; gcode:
;     {% set SPEED = params.SPEED | default(9000) | int %}

;     M117 gotta go fast

;     G28
;     GET_POSITION

;     G1 F{SPEED}
;     G1 X{printer.toolhead.axis_minimum.x} Y{printer.toolhead.axis_minimum.y}
;     G1 X{printer.toolhead.axis_maximum.x} Y{printer.toolhead.axis_maximum.y}
;     G1 X{printer.toolhead.axis_minimum.x} Y{printer.toolhead.axis_minimum.y}
;     G1 X{printer.toolhead.axis_maximum.x} Y{printer.toolhead.axis_maximum.y}

;     G1 X{printer.toolhead.axis_minimum.x} Y{printer.toolhead.axis_maximum.y}

;     G1 X{printer.toolhead.axis_maximum.x} Y{printer.toolhead.axis_minimum.y}
;     G1 X{printer.toolhead.axis_minimum.x} Y{printer.toolhead.axis_maximum.y}
;     G1 X{printer.toolhead.axis_maximum.x} Y{printer.toolhead.axis_minimum.y}
;     G1 X{printer.toolhead.axis_minimum.x} Y{printer.toolhead.axis_maximum.y}

;     G1 X{printer.toolhead.axis_minimum.x} Y{printer.toolhead.axis_minimum.y}
;     G1 X{printer.toolhead.axis_maximum.x} Y{printer.toolhead.axis_minimum.y}
;     G1 X{printer.toolhead.axis_maximum.x} Y{printer.toolhead.axis_maximum.y}
;     G1 X{printer.toolhead.axis_minimum.x} Y{printer.toolhead.axis_maximum.y}
;     G1 X{printer.toolhead.axis_minimum.x} Y{printer.toolhead.axis_minimum.y}

;     G28
;     GET_POSITION

;     M117

;; https://klipper.discourse.group/t/example-search-printer-objects/164
[gcode_macro SEARCH_VARS]
gcode:
    {% set search = params.S|lower %}
    {% set ns = namespace() %}
    {% for item in printer  %}
        {% if ' ' in item %}
            {% set ns.path = ['printer', "['%s']" % (item), ''] %}
        {% else %}
            {% set ns.path = ['printer.', item, ''] %}
        {% endif %}

        {% if search in ns.path|lower %}
            { action_respond_info(ns.path|join) }
        {% endif %}

        {% if printer[item].items() %}
            {% for childkey, child in printer[item].items() recursive %}
                {% set ns.path = ns.path[:loop.depth|int + 1] %}

                {% if ' ' in childkey %}
                    {% set null = ns.path.append("['%s']" % (childkey)) %}
                {% else %}
                    {% set null = ns.path.append(".%s" % (childkey)) %}
                {% endif %}

                {% if child is mapping  %}
                    { loop(child.items()) }
                {% else %}
                    {% if search in ns.path|lower %}
                        { action_respond_info("%s : %s" % (ns.path|join, child)) }
                    {% endif %}
                {% endif %}

            {% endfor %}
        {% endif %}
    {% endfor %}

; [gcode_macro FIRST_LAYER_CALIBRATION]
; gcode:
;     {% set EXTRUDER_TEMP = params.EXTRUDER | float %}
;     {% set BED_TEMP = params.BED| float %}

;     PRINT_START EXTRUDER={ EXTRUDER_TEMP } BED={ BED_TEMP }

;     ;; turn off filament runout sensor
;     SET_FILAMENT_SENSOR SENSOR=btt_sfs ENABLE=0

;     SDCARD_PRINT_FILE FILENAME=calibration/first_layer_no_temp.gcode
;     ; SDCARD_PRINT_FILE FILENAME=calibration/first_layer_rectangle_no_temp.gcode

; [gcode_macro _SET_FAN_SPEED]
; gcode:
;     M106 S{ (params.PERCENT | float) * 255 / 100 }


[gcode_macro _RUNOUT_INFO]
gcode:
  {% if 'filament_motion_sensor btt_sfs' in printer.configfile.settings %}
    {% set enable = printer['filament_motion_sensor btt_sfs'].enabled %}
    {% set detect = printer['filament_motion_sensor btt_sfs'].filament_detected %}

    { action_respond_info("RUNOUT Motion Sensor:
                           Enabled: %s
                           Detect Filament: %s" % (enable|lower, detect|lower)) }
  {% endif %}

[gcode_macro M115]
description: Print host and mcu version
rename_existing: M115.1
gcode:
  {% set parameters = namespace(output = 'mcu build version: \n') %}
  {% for name1 in printer %}
    {% for name2 in printer[name1] %}
      {% set show = ['mcu_version'] %}
      {% if name2 is in show %}
        {% set param = "%s: %s" % (name1, printer[name1][name2]) %}
        {% set parameters.output = parameters.output +  param + "\n" %}
      {% endif %}
    {% endfor %}
  {% endfor %}

  {action_respond_info(parameters.output)}
  M115.1

## https://klipper.discourse.group/t/how-to-override-m117-and-still-call-base-command/1024/7?u=blalor
## https://github.com/pedrolamas/klipper-config/blob/7720705aa437a46bf50a02f16c2b3849ae16d4ac/ender-3-v2/user_macros.cfg#L129-L133
[gcode_macro M117]
description: displays a message on the display and echos it to the console
rename_existing: M117.1
gcode:
    M117.1 { rawparams }

    {% if rawparams %}
        { action_respond_info(rawparams) }
    {% endif %}

; [gcode_macro SET_BED_SURFACE]
; description: stores and optionally activates the gcode offset for a given bed surface
; gcode:
;     {% set svv = printer.save_variables.variables %}

;     {% set BED_SURFACE = params.NAME | default(svv.selected_bed_surface) %}
;     {% set Z_OFFSET    = params.OFFSET | default(printer.gcode_move.homing_origin.z) | float %}
;     {% set MOVE        = params.MOVE | default(0) | int %}

;     {% set OLD_Z_OFFSET = svv['bed_surface_offsets.' + BED_SURFACE] | default("unknown") %}

;     SAVE_VARIABLE VARIABLE=selected_bed_surface VALUE="'{ BED_SURFACE }'"
;     SAVE_VARIABLE VARIABLE=bed_surface_offsets.{ BED_SURFACE } VALUE={ '%.3f' % Z_OFFSET }

;     RESPOND TYPE=command MSG="{ 'bed surface: %s, offset: %r -> %05.3f' % (BED_SURFACE, OLD_Z_OFFSET, Z_OFFSET) }"

;     SET_GCODE_OFFSET Z={ '%.3f' % Z_OFFSET } MOVE={ MOVE }

; [gcode_macro APPLY_BED_SURFACE_OFFSET]
; description: activates the gcode offset for the configured bed surface
; gcode:
;     {% set svv = printer.save_variables.variables %}

;     {% set BED_SURFACE = svv.selected_bed_surface %}
;     {% set Z_OFFSET    = svv['bed_surface_offsets.' + BED_SURFACE] | float %}

;     RESPOND TYPE=command MSG="{ 'bed surface: %s, offset: %05.3f' % (BED_SURFACE, Z_OFFSET) }"
;     SET_GCODE_OFFSET Z={ '%.3f' % Z_OFFSET } MOVE={ 1 if printer.toolhead.homed_axes == 'XYZ' else 0 }

; [gcode_macro HEAT_SOAK]
; description: heats the bed for a while

; variable_target_temp: 0
; variable_stage: None ## heating -> soaking -> done -> None

; ## in seconds
; variable_check_interval: 10
; variable_soak_time_remaining: 0
; variable_total_time_elapsed: 0

; gcode:
;     {% set TARGET = params.TARGET | default(0) | float %}
;     {% set DURATION = (params.DURATION | default(5) | int) * 60 %} ## minutes to seconds

;     SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=target_temp         VALUE={ TARGET }
;     SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=stage               VALUE="'heating'"
;     SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=soak_time_remaining VALUE={ DURATION }
;     SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=total_time_elapsed  VALUE=0

;     ;; fire up the heater
;     SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={ TARGET }

;     ;; run the fan to circulate air
;     _SET_FAN_SPEED PERCENT=50

;     ;; put the bed and nozzle where they're a safe distance apart
;     G28
;     CENTER

;     M84 ;; turn off steppers

;     UPDATE_DELAYED_GCODE ID=heat_soaker DURATION={ check_interval }

; [gcode_macro CANCEL_HEAT_SOAK]
; description: cancels an in-progress HEAT_SOAK cycle
; gcode:
;     SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=stage VALUE="'cancel'"
;     UPDATE_DELAYED_GCODE ID=heat_soaker DURATION=1

; [delayed_gcode heat_soaker]
; ; ## debug
; ; { action_respond_info( printer['gcode_macro HEAT_SOAK'] | tojson )}
; gcode:
;     {% set heat_soak = printer['gcode_macro HEAT_SOAK'] %}

;     ## update total time elapsed
;     {% set total_time_elapsed = heat_soak.total_time_elapsed + heat_soak.check_interval %}
;     SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=total_time_elapsed VALUE={ total_time_elapsed }

;     {% set stage = heat_soak.stage %}
;     {% if stage == "heating" and printer.heater_bed.temperature >= heat_soak.target_temp %}
;         {% set stage = "soaking" %}
;     {% endif %}

;     {% if stage == "soaking" %}
;         ## update soak countdown
;         {% set soak_time_remaining = [heat_soak.soak_time_remaining - heat_soak.check_interval, 0] | max %}
;         SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=soak_time_remaining VALUE={ soak_time_remaining }

;         {% if soak_time_remaining == 0 %}
;             {% set stage = "done" %}
;         {% endif %}
;     {% endif %}

;     SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=stage VALUE="'{ stage }'"

;     {% if stage in ("done", "cancel") %}

;         {% if stage == "cancel" %}
;             {% set stage = "done" %}
;             TURN_OFF_HEATERS
;             M107 ; turn off fan

;             M117 { "soak cancelled after ~%.1fm" | format(total_time_elapsed / 60.0) }
;         {% else %}
;             M117 { "soak complete after %.1fm" | format(total_time_elapsed / 60.0) }
;         {% endif %}

;         ## reset all state vars, except stage, which may be queried via the api
;         SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=target_temp         VALUE=0
;         SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=soak_time_remaining VALUE=0
;         SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=total_time_elapsed  VALUE=0

;     {% else %}

;         {% if total_time_elapsed % 90 == 0 %}
;             ## output status periodically
;             {% if stage == "heating" %}
;                 M117 { "heating -- %.1fm elapsed" | format(total_time_elapsed / 60.0) }
;             {% elif stage == "soaking" %}
;                 M117 { "soaking -- %.1fm remaining" | format(soak_time_remaining / 60.0) }
;             {% endif %}
;         {% endif %}

;         ## trigger ourselves again
;         UPDATE_DELAYED_GCODE ID=heat_soaker DURATION={ heat_soak.check_interval }

;         ## dwell for 1ms to prevent from going idle
;         G4 P1

;     {% endif %}

; [gcode_macro CANCEL_PRINT]
; rename_existing: CANCEL_PRINT_1
; gcode:
;     CANCEL_PRINT_1
;     PRINT_END

; [delayed_gcode welcome]
; initial_duration: 1.0 ## fire 1s after system is ready
; gcode:
;     M117 ohai!
;     UPDATE_DELAYED_GCODE ID=become_idle DURATION=60

; [delayed_gcode become_idle]
; gcode:
;     M117
;     SET_PIN PIN=frame_lighting VALUE=0

[gcode_shell_command generate_belt_tension_graph]
command: /home/pi/klipper_config/generate_belt_tension_graph.sh
timeout: 90.
verbose: True

[gcode_macro MEASURE_BELT_TENSION]
gcode:
    TEST_RESONANCES AXIS=1,1  OUTPUT=raw_data NAME=belt-tension-upper
    TEST_RESONANCES AXIS=1,-1 OUTPUT=raw_data NAME=belt-tension-lower

    RUN_SHELL_COMMAND CMD=generate_belt_tension_graph
