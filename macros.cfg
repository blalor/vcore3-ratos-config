## -*- ini -*-

# G90 - absolute
# G91 - relative

[gcode_macro G0]
## workaround for PS 'G1 F0' bug
## fixed in SS: https://github.com/supermerill/SuperSlicer/issues/2099
## @todo report to PS
rename_existing: G0.1
gcode:
    {% if params.F is defined and params.F == "0" %}
        { action_respond_info("WARNING: G1 F0 workaround!") }
    {% endif %}

    {% set F = params.F if params.F is defined and params.F != "0" else None %}

    G0.1 {% for k, v in params.items() if k not in "FG" %}{ k }{ v } {% endfor %} { "F" + F if F }

[gcode_macro _REPORT_POSITION]
gcode:
    { action_respond_info("[%s] toolhead position: %.2f, %.2f, %.2f" % (params.REF, printer.toolhead.position.x, printer.toolhead.position.y, printer.toolhead.position.z)) }

[gcode_macro CENTER]
gcode:
    G90
    G0 X{ printer.toolhead.axis_maximum.x/2 } Y{ printer.toolhead.axis_maximum.y/2 } Z{ printer.toolhead.axis_maximum.z/2 } F7200

[gcode_macro LAZY_HOME]
gcode:
    {% if printer.toolhead.homed_axes != 'XYZ' %}
        G28 ; home all

        {% if printer.configfile.settings.stepper_z.endstop_pin == "probe:z_virtual_endstop" %}
            ;; move Z so the nozzle doesn't sit on the bed while heating
            G0 Z5 F3000
        {% endif %}
    {% endif %}

[gcode_macro THOROUGHLY_HOME]
gcode:
    G28
    Z_TILT_ADJUST
    G28 Z

[gcode_macro RESET_VELOCITY]
gcode:
    {% set cfg_velocity               = printer.configfile.settings.printer.max_velocity | float %}
    {% set cfg_accel                  = printer.configfile.settings.printer.max_accel | float %}
    {% set cfg_square_corner_velocity = printer.configfile.settings.printer.square_corner_velocity | float %}
    {% set cfg_min_cruise_ratio       = printer.configfile.settings.printer.minimum_cruise_ratio | float %}

    SET_VELOCITY_LIMIT VELOCITY={cfg_velocity} ACCEL={cfg_accel} SQUARE_CORNER_VELOCITY={cfg_square_corner_velocity} MINIMUM_CRUISE_RATIO={cfg_min_cruise_ratio}

; [gcode_macro test_speed_fast]
; gcode:
;     {% set SPEED = params.SPEED | default(9000) | int %}

;     M117 gotta go fast

;     G28
;     GET_POSITION

;     G1 F{SPEED}
;     G1 X{printer.toolhead.axis_minimum.x} Y{printer.toolhead.axis_minimum.y}
;     G1 X{printer.toolhead.axis_maximum.x} Y{printer.toolhead.axis_maximum.y}
;     G1 X{printer.toolhead.axis_minimum.x} Y{printer.toolhead.axis_minimum.y}
;     G1 X{printer.toolhead.axis_maximum.x} Y{printer.toolhead.axis_maximum.y}

;     G1 X{printer.toolhead.axis_minimum.x} Y{printer.toolhead.axis_maximum.y}

;     G1 X{printer.toolhead.axis_maximum.x} Y{printer.toolhead.axis_minimum.y}
;     G1 X{printer.toolhead.axis_minimum.x} Y{printer.toolhead.axis_maximum.y}
;     G1 X{printer.toolhead.axis_maximum.x} Y{printer.toolhead.axis_minimum.y}
;     G1 X{printer.toolhead.axis_minimum.x} Y{printer.toolhead.axis_maximum.y}

;     G1 X{printer.toolhead.axis_minimum.x} Y{printer.toolhead.axis_minimum.y}
;     G1 X{printer.toolhead.axis_maximum.x} Y{printer.toolhead.axis_minimum.y}
;     G1 X{printer.toolhead.axis_maximum.x} Y{printer.toolhead.axis_maximum.y}
;     G1 X{printer.toolhead.axis_minimum.x} Y{printer.toolhead.axis_maximum.y}
;     G1 X{printer.toolhead.axis_minimum.x} Y{printer.toolhead.axis_minimum.y}

;     G28
;     GET_POSITION

;     M117

;; https://klipper.discourse.group/t/example-search-printer-objects/164
[gcode_macro SEARCH_VARS]
gcode:
    {% set search = params.S|lower %}
    {% set ns = namespace() %}
    {% for item in printer  %}
        {% if ' ' in item %}
            {% set ns.path = ['printer', "['%s']" % (item), ''] %}
        {% else %}
            {% set ns.path = ['printer.', item, ''] %}
        {% endif %}

        {% if search in ns.path|lower %}
            { action_respond_info(ns.path|join) }
        {% endif %}

        {% if printer[item].items() %}
            {% for childkey, child in printer[item].items() recursive %}
                {% set ns.path = ns.path[:loop.depth|int + 1] %}

                {% if ' ' in childkey %}
                    {% set null = ns.path.append("['%s']" % (childkey)) %}
                {% else %}
                    {% set null = ns.path.append(".%s" % (childkey)) %}
                {% endif %}

                {% if child is mapping  %}
                    { loop(child.items()) }
                {% else %}
                    {% if search in ns.path|lower %}
                        { action_respond_info("%s : %s" % (ns.path|join, child)) }
                    {% endif %}
                {% endif %}

            {% endfor %}
        {% endif %}
    {% endfor %}


[gcode_macro FIRST_LAYER_CALIBRATION]
gcode:
    {% set EXTRUDER_TEMP = params.EXTRUDER | float %}
    {% set BED_TEMP = params.BED| float %}

    START_PRINT EXTRUDER_TEMP={ EXTRUDER_TEMP } BED_TEMP={ BED_TEMP } PRINT_MIN=30,30 PRINT_MAX=90,90

    ## originally generated for v0's 120mm(ish) bed; center it on this bed
    ; SET_GCODE_OFFSET X=170 Y=170 MOVE=1 MOVE_SPEED={ printer.toolhead.max_velocity }

    SDCARD_PRINT_FILE FILENAME=calibration/first_layer_no_temp.gcode

[gcode_macro _SET_FAN_SPEED]
gcode:
    ; M118 fan speed { params.PERCENT }
    M106 S{ (params.PERCENT | float) * 255 / 100 }


[gcode_macro _RUNOUT_INFO]
gcode:
  {% if 'filament_switch_sensor lgx' in printer.configfile.settings %}
    {% set enable = printer['filament_switch_sensor lgx'].enabled %}
    {% set detect = printer['filament_switch_sensor lgx'].filament_detected %}

    { action_respond_info("RUNOUT Motion Sensor:
                           Enabled: %s
                           Detect Filament: %s" % (enable|lower, detect|lower)) }
  {% endif %}


[gcode_macro M115]
description: Print host and mcu version
rename_existing: M115.1
gcode:
  {% set parameters = namespace(output = 'mcu build version: \n') %}
  {% for name1 in printer %}
    {% for name2 in printer[name1] %}
      {% set show = ['mcu_version'] %}
      {% if name2 is in show %}
        {% set param = "%s: %s" % (name1, printer[name1][name2]) %}
        {% set parameters.output = parameters.output +  param + "\n" %}
      {% endif %}
    {% endfor %}
  {% endfor %}

  { action_respond_info(parameters.output) }
  M115.1

## https://klipper.discourse.group/t/how-to-override-m117-and-still-call-base-command/1024/7?u=blalor
## https://github.com/pedrolamas/klipper-config/blob/7720705aa437a46bf50a02f16c2b3849ae16d4ac/ender-3-v2/user_macros.cfg#L129-L133
[gcode_macro M117]
description: displays a message on the display and echos it to the console
rename_existing: M117.1
gcode:
    ## workaround for rawparams starting with a digit
    M117.1 { "_ " if rawparams[0].isdigit() }{ rawparams }

    {% if rawparams %}
        { action_respond_info(rawparams) }
    {% endif %}

; [gcode_macro SET_BED_SURFACE]
; description: stores and optionally activates the gcode offset for a given bed surface
; gcode:
;     {% set svv = printer.save_variables.variables %}

;     {% set BED_SURFACE = params.NAME | default(svv.selected_bed_surface) %}
;     {% set Z_OFFSET    = params.OFFSET | default(printer.gcode_move.homing_origin.z) | float %}
;     {% set MOVE        = params.MOVE | default(0) | int %}

;     {% set OLD_Z_OFFSET = svv['bed_surface_offsets.' + BED_SURFACE] | default("unknown") %}

;     SAVE_VARIABLE VARIABLE=selected_bed_surface VALUE="'{ BED_SURFACE }'"
;     SAVE_VARIABLE VARIABLE=bed_surface_offsets.{ BED_SURFACE } VALUE={ '%.3f' % Z_OFFSET }

;     RESPOND TYPE=command MSG="{ 'bed surface: %s, offset: %r -> %05.3f' % (BED_SURFACE, OLD_Z_OFFSET, Z_OFFSET) }"

;     SET_GCODE_OFFSET Z={ '%.3f' % Z_OFFSET } MOVE={ MOVE }

; [gcode_macro APPLY_BED_SURFACE_OFFSET]
; description: activates the gcode offset for the configured bed surface
; gcode:
;     {% set svv = printer.save_variables.variables %}

;     {% set BED_SURFACE = svv.selected_bed_surface %}
;     {% set Z_OFFSET    = svv['bed_surface_offsets.' + BED_SURFACE] | float %}

;     RESPOND TYPE=command MSG="{ 'bed surface: %s, offset: %05.3f' % (BED_SURFACE, Z_OFFSET) }"
;     SET_GCODE_OFFSET Z={ '%.3f' % Z_OFFSET } MOVE={ 1 if printer.toolhead.homed_axes == 'XYZ' else 0 }

[gcode_macro HEAT_SOAK]
description: heats the bed for a while

variable_target_temp: 0
variable_stage: None ## heating -> soaking -> done -> None

## in seconds
variable_check_interval: 10
variable_soak_time_remaining: 0
variable_total_time_elapsed: 0

gcode:
    {% set TARGET = params.TARGET | default(0) | float %}
    {% set DURATION = (params.DURATION | default(0) | int) * 60 %} ## minutes to seconds

    SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=target_temp         VALUE={ TARGET }
    SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=stage               VALUE="'heating'"
    SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=soak_time_remaining VALUE={ DURATION }
    SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=total_time_elapsed  VALUE=0

    ;; turn off extruder
    SET_HEATER_TEMPERATURE HEATER=extruder TARGET=0

    ;; fire up the bed heater
    SET_HEATER_TEMPERATURE HEATER=heater_bed TARGET={ TARGET }

    ;; run the fan to circulate air
    _SET_FAN_SPEED PERCENT=50

    ;; put the bed and nozzle where they're a safe distance apart
    G28
    _PARK LOCATION=center
    G0 Z{ printer.configfile.settings.safe_z_home.z_hop } F6000

    M84 ;; turn off steppers

    M117 heat soaking for { params.DURATION }m @ { TARGET }
    UPDATE_DELAYED_GCODE ID=heat_soaker DURATION={ check_interval }

[gcode_macro CANCEL_HEAT_SOAK]
description: cancels an in-progress HEAT_SOAK cycle
gcode:
    SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=stage VALUE="'cancel'"
    UPDATE_DELAYED_GCODE ID=heat_soaker DURATION=1

[delayed_gcode heat_soaker]
; ## debug
; { action_respond_info( printer['gcode_macro HEAT_SOAK'] | tojson )}
gcode:
    {% set heat_soak = printer['gcode_macro HEAT_SOAK'] %}

    ## update total time elapsed
    {% set total_time_elapsed = heat_soak.total_time_elapsed + heat_soak.check_interval %}
    SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=total_time_elapsed VALUE={ total_time_elapsed }

    {% set stage = heat_soak.stage %}
    {% if stage == "heating" and printer.heater_bed.temperature >= heat_soak.target_temp %}
        {% set stage = "soaking" %}
    {% endif %}

    {% if stage == "soaking" %}
        ## update soak countdown
        {% set soak_time_remaining = [heat_soak.soak_time_remaining - heat_soak.check_interval, 0] | max %}
        SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=soak_time_remaining VALUE={ soak_time_remaining }

        {% if soak_time_remaining == 0 %}
            {% set stage = "done" %}
        {% endif %}
    {% endif %}

    SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=stage VALUE="'{ stage }'"

    {% if stage in ("done", "cancel") %}

        {% if stage == "cancel" %}
            {% set stage = "done" %}
            TURN_OFF_HEATERS
            M107 ; turn off fan

            M117 { "soak cancelled after ~%.1fm" | format(total_time_elapsed / 60.0) }
        {% else %}
            M117 { "soak complete after %.1fm" | format(total_time_elapsed / 60.0) }
        {% endif %}

        ## reset all state vars, except stage, which may be queried via the api
        SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=target_temp         VALUE=0
        SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=soak_time_remaining VALUE=0
        SET_GCODE_VARIABLE MACRO=HEAT_SOAK VARIABLE=total_time_elapsed  VALUE=0

    {% else %}

        {% if total_time_elapsed % 90 == 0 %}
            ## output status periodically
            {% if stage == "heating" %}
                M117 { "heating -- %.1fm elapsed" | format(total_time_elapsed / 60.0) }
            {% elif stage == "soaking" %}
                M117 { "soaking -- %.1fm remaining" | format(soak_time_remaining / 60.0) }
            {% endif %}
        {% endif %}

        ## trigger ourselves again
        UPDATE_DELAYED_GCODE ID=heat_soaker DURATION={ heat_soak.check_interval }

        ## dwell for 1ms to prevent from going idle
        G4 P1

    {% endif %}

## faster gyroid infill, via https://github.com/RomRider/klipper-FastGyroidInfill
[gcode_macro USE_INFILL_SQV]
variable_square_corner_velocity: 25
gcode:
    SET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY={ square_corner_velocity | default(printer.configfile.settings.printer.square_corner_velocity, true)}

[gcode_macro SET_INFILL_SQV]
gcode:
    SET_GCODE_VARIABLE MACRO=USE_INFILL_SQV VARIABLE=square_corner_velocity VALUE="{ params.SQV | default(None, true) }"

[gcode_macro USE_NORMAL_SQV]
gcode:
    SET_VELOCITY_LIMIT SQUARE_CORNER_VELOCITY={ printer.configfile.settings.printer.square_corner_velocity }

#### BEGIN REPLACEMENT OF RATOS MACROS
#### BEGIN REPLACEMENT OF RATOS MACROS
#### BEGIN REPLACEMENT OF RATOS MACROS

#####
# CONFIGURATION VARIABLES
#####

[gcode_macro RatOS]
# Skew profile to load before starting the print
# uncomment this to use your calibrated skew correction profile.
#variable_skew_profile: "my_skew_profile"

# Set the speed for travel moves in RatOS Macros in mm/s.
variable_macro_travel_speed: 300

gcode:
    {% for var, value in printer["gcode_macro RatOS"].items() %}
        { action_respond_info(var ~ ": " ~ value) }
    {% endfor %}

#####
# GENERAL MACROS
#####

[gcode_macro PAUSE]
rename_existing: PAUSE_BASE
variable_extrude: 1.5

gcode:
    {% set ratOS = printer["gcode_macro RatOS"] %}

    SAVE_GCODE_STATE NAME=PAUSE_state

    # Define park positions
    {% set speed = ratOS.macro_travel_speed|float * 60 %}

    # Calculate safe Z position
    {% set max_z = printer.toolhead.axis_maximum.z|float %}
    {% set act_z = printer.toolhead.position.z|float %}
    {% if act_z < (max_z - 2.0) %}
        {% set z_safe = 2.0 %}
    {% else %}
        {% set z_safe = max_z - act_z %}
    {% endif %}

    PAUSE_BASE

    G91

    # Retract
    {% if printer.extruder.can_extrude|lower == 'true' %}
        G1 E-{ extrude } F2100
    {% else %}
        { action_respond_info("Extruder not hot enough") }
    {% endif %}

    # Move to park position
    {% if "xyz" in printer.toolhead.homed_axes %}
        G1 Z{z_safe} F900
        _PARK LOCATION=back
    {% else %}
        { action_respond_info("Printer not homed") }
    {% endif %}

[gcode_macro RESUME]
rename_existing: RESUME_BASE
gcode:
    # Prime
    {% if printer.extruder.can_extrude|lower == 'true' %}
        G91
        G1 E{ printer["gcode_macro PAUSE"].extrude } F2100
        G90
    {% else %}
      { action_respond_info("Extruder not hot enough") }
    {% endif %}

    RESTORE_GCODE_STATE NAME=PAUSE_state MOVE=1
    RESUME_BASE

[gcode_macro CANCEL_PRINT]
rename_existing: CANCEL_PRINT_BASE
gcode:
    END_PRINT
    TURN_OFF_HEATERS
    CLEAR_PAUSE
    #SDCARD_RESET_FILE
    CANCEL_PRINT_BASE

[gcode_macro PRIME_LINE]
gcode:
    {% set ratOS = printer["gcode_macro RatOS"] %}
    {% set speed = ratOS.macro_travel_speed|float * 60 %}

    # Absolute positioning
    G90

    # Absolute extrusion
    M82
    M117 Priming nozzle...

    # Lift 5 mm
    G1 Z5 F3000

    # Move to prime area
    G1 X{printer.toolhead.axis_minimum.x + 3} Y{printer.toolhead.axis_minimum.y + 10} F{speed}

    # Get ready to prime
    G1 Z0.3 F3000

    # Reset extrusion distance
    G92 E0

    # Relative positioning
    G91

    # Prime nozzle
    G1 E10 F1200

    ;; https://3dprinting.stackexchange.com/questions/6289/how-is-the-e-argument-calculated-for-a-given-g1-command/6290#6290
    ;; 1mm wide by 80mm long zig-zag
    {% for _e in range(0, 160, ((0.2 * 4) * 10) | int) %}
    G1 X1 E0.2 F1200
    G1 Y1 E0.2 F1200
    G1 X-1 E0.2 F1200
    G1 Y1 E0.2 F1200
    {% endfor %}

    ;; wipe
    G1 E-0.8 F3000 ; retract
    G1 Y-0.5 E0 F{speed}
    G1 Y0.5 E0 F{speed}
    G1 X5 E0 F{speed}
    G1 E0.6 F1500 ; de-retract

    ; ;; zig zag
    ; G1 Y5  E1 F1200
    ; G1 X-5 E1 F1200
    ; G1 Y5  E1 F1200
    ; G1 X5  E1 F1200
    ; G1 Y5  E1 F1200
    ; G1 X-5 E1 F1200
    ; G1 Y5  E1 F1200
    ; G1 X5  E1 F1200
    ; G1 Y5  E1 F1200
    ; G1 X-5 E1 F1200
    ; G1 Y5  E1 F1200
    ; G1 X5  E1 F1200
    ; G1 Y5  E1 F1200
    ; G1 X-5 E1 F1200
    ; G1 Y5  E1 F1200
    ; G1 X5  E1 F1200
    ; ;; wipe
    ; G1 E-0.8 F3000 ; retract
    ; G1 X-0.5 E0 F{speed}
    ; G1 X0.5 E0 F{speed}
    ; G1 Y5 E0 F{speed}
    ; G1 E0.6 F1500 ; de-retract

    # back to absolute positioning
    G90

    # Reset extrusion
    G92 E0


[gcode_macro _PARK]
gcode:
    {% set ratOS = printer["gcode_macro RatOS"] %}
    {% set speed = ratOS.macro_travel_speed|float * 60 %}

    # Get X position
    {% if params.X %}
        {% if params.X|float >= printer.toolhead.axis_minimum.x + 5 and params.X|float <= printer.toolhead.axis_maximum.x - 5 %}
            {% set safe_x = params.X|float %}
        {% else %}
            { action_respond_info('The requested X co-ordinate is outside the defined axis bounds - using defaults') }
            {% set safe_x = printer.toolhead.axis_maximum.x / 2 %}
        {% endif %}
    {% else %}
        {% set safe_x = printer.toolhead.axis_maximum.x / 2 %}
    {% endif %}

    # Get Y position
    {% if params.LOCATION|default('back')|lower == 'back' %}
        {% set y = printer.toolhead.axis_maximum.y - 5 %}
    {% elif params.LOCATION|lower == 'front' %}
        {% set y = printer.toolhead.axis_minimum.y + 5 %}
    {% elif params.LOCATION|lower == 'center' %}
        {% set y = printer.toolhead.axis_maximum.y / 2 %}
    {% endif %}

    # Absolute positioning
    G90

    # Park
    G0 X{safe_x} Y{y} F{speed}

#####
# COLOR CHANGE
#####
[gcode_macro MultiMaterial]
variable_previous_tool: None
variable_current_tool: 0 ## safe default, hopefully
gcode:
    RESPOND TYPE=command MSG="{ printer['gcode_macro MultiMaterial'] }"

[gcode_macro M600]
description: change filament
gcode:
    {% set mm = printer["gcode_macro MultiMaterial"] %}
    ## don't pause for filament change if the filaments are the same
    {% if mm.previous_tool != mm.current_tool %}
        PAUSE
        ; UNLOAD_FILAMENT
        M117 Please load new filament and resume
    {% endif %}

[gcode_macro SET_TOOL]
gcode:
    {% set mm = printer["gcode_macro MultiMaterial"] %}

    SET_GCODE_VARIABLE MACRO=MultiMaterial VARIABLE=previous_tool VALUE={ mm.current_tool }
    SET_GCODE_VARIABLE MACRO=MultiMaterial VARIABLE=current_tool  VALUE={ params.TOOL }

[gcode_macro T0]
description: switch to tool 0
gcode:
    SET_TOOL TOOL=0

[gcode_macro T1]
description: switch to tool 1
gcode:
    SET_TOOL TOOL=1

[gcode_macro M900]
description: marlin linear advance
gcode:
    { "" } # empty string: no-op

#####
# FILAMENT MANAGEMENT
#####

[gcode_macro UNLOAD_FILAMENT]
gcode:
    SAVE_GCODE_STATE NAME=unload_state

    G91

    {% if params.TEMP is defined or printer.extruder.can_extrude|lower == 'false' %}
        M117 Heating...

        # Heat up hotend to provided temp or 220 as default as that should work OK with most filaments.
        M104 S{params.TEMP|default(220, true)}
        TEMPERATURE_WAIT SENSOR=extruder MINIMUM={params.TEMP|default(220, true)}
    {% endif %}

    M117 Unloading filament...

    # Extract filament to cold end area
    G0 E-5 F3600

    # Wait for three seconds
    G4 P3000

    # Push back the filament to smash any stringing
    G0 E5 F3600

    # Extract back fast in to the cold zone
    G0 E-15 F3600

    # Continue extraction slowly, allow the filament time to cool solid before it reaches the gears
    G0 E-130 F300

    M117 Filament unloaded!

    RESTORE_GCODE_STATE NAME=unload_state

[gcode_macro LOAD_FILAMENT]
gcode:
    SAVE_GCODE_STATE NAME=load_state

    G91

    # Heat up hotend to provided temp or 220 as default as that should work OK with most filaments.
    {% if params.TEMP is defined or printer.extruder.can_extrude|lower == 'false' %}
        M117 Heating...
        M104 S{params.TEMP|default(220, true)}
        TEMPERATURE_WAIT SENSOR=extruder MINIMUM={params.TEMP|default(220, true)}
    {% endif %}

    M117 Loading filament...

    ## turn off filament runout sensor
    {% if 'filament_switch_sensor lgx' in printer.configfile.settings %}
        SET_FILAMENT_SENSOR SENSOR=lgx ENABLE=0
    {% endif %}

    # Load the filament into the hotend area.
    G0 E100 F600

    # Wait a secod
    G4 P1000

    # Purge
    G0 E40 F100

    # Wait for purge to complete
    M400

    M117 Filament loaded!

    RESTORE_GCODE_STATE NAME=load_state

#####
# START PRINT MACROS
# Call this from your slicer (custom g-code).
# Read more here: https://rat-rig.github.io/V-CoreOS/#/slicers
#####

[gcode_macro START_PRINT]
## support PRINT_MIN={first_layer_print_min[0]},{first_layer_print_min[1]} PRINT_MAX={first_layer_print_max[0]},{first_layer_print_max[1]}
variable_first_layer_min_xy: None
variable_first_layer_max_xy: None

gcode:
    {% set ratOS = printer["gcode_macro RatOS"] %}

    {% set travel_speed = ratOS.macro_travel_speed|float * 60 %}

    {% set extruder_temp = params.EXTRUDER_TEMP | default(printer.extruder.target, true)   | float %}
    {% set bed_temp      = params.BED_TEMP      | default(printer.heater_bed.target, true) | float %}

    # extruder temp to soften ooze, hopefully without inducing ooze.
    # offsetting extruder_temp is an idea from E3D's PZ Probe docs:
    # https://e3d-online.com/pages/e3d-support-pz-probe
    #> It is recommended when probing the bed, to probe when the nozzle
    #> temperature 50°C below the target temperature to avoid oozing.
    # this is probably a little higher than the static 160° used previously, and
    # I'm thinking that doing the nozzle probing like this (and before fully
    # heating and inducing ooze) may make for a more consistent setup.
    # 50 wasn't enough, PLA oozed at 180°. trying 70.
    ;{% set nozzle_preheat_temp = extruder_temp - 70 %}

    # cartographer recommends 150 MAX
    {% set nozzle_preheat_temp = 150 %}

    ## single_extruder_multi_material
    {% set semm = params.SEMM == "true" %}

    ## reset various states to configured or safe defaults

    SET_TOOL TOOL=0

    CLEAR_PAUSE

    # reset velocity limits
    RESET_VELOCITY

    # reset PA to configured settings
    SET_PRESSURE_ADVANCE ADVANCE={ printer.configfile.settings.extruder.pressure_advance } SMOOTH_TIME={ printer.configfile.settings.extruder.pressure_advance_smooth_time }

    # reset z offset; must already be homed
    SET_GCODE_OFFSET X=0 Y=0 Z=0

    # Reset speed and extrusion rates, in case they were manually changed
    M220 S100
    M221 S100

    # turn off fan; HEAT_SOAK leaves it on :-/
    M107

    # ensure heat soak is inactive
    UPDATE_DELAYED_GCODE ID=heat_soaker DURATION=0

    ; {% if 'firmware_retract' in printer.configfile.settings %}
    ;   _SET_RETRACTION RETRACT_LENGTH=0
    ; {% endif %}

    # Metric values
    G21

    # Absolute positioning
    G90

    # Set extruder to absolute mode
    M82

    # Home
    G28

    ## put the nozzle close to the bed in the center to allow it to come up to
    ## temp
    _PARK LOCATION=center
    G0 Z{ printer.configfile.settings.safe_z_home.z_hop } F6000

    # Wait for bed to heat up; when mostly heated, also heat the nozzle
    M117 Heating bed...

    # turn on bed heater, wait for 80% of target
    M140 S{ bed_temp }
    TEMPERATURE_WAIT SENSOR=heater_bed MINIMUM={ bed_temp * 0.8 }

    # start heating extruder to soften ooze, hopefully without inducing ooze
    M117 Preheating nozzle...
    M104 S{ nozzle_preheat_temp }

    # finish waiting for bed
    M117 Finishing bed heating...
    M190 S{ bed_temp }

    # finish waiting for extruder
    M117 Finishing nozzle preheating...
    M109 S{ nozzle_preheat_temp }

    # Re-home Z (to account for thermal expansion) and adjust bed tilt
    M117 Adjusting for tilt...
    G28 Z
    Z_TILT_ADJUST

    # Home again as Z will have changed after tilt adjustment and bed heating.
    M117 Rehoming after tilt adjustment...
    G28 Z

    M117 Bed mesh calibration...

    SET_GCODE_VARIABLE MACRO=START_PRINT VARIABLE=first_layer_min_xy VALUE="{ params.PRINT_MIN | default(None, true) }"
    SET_GCODE_VARIABLE MACRO=START_PRINT VARIABLE=first_layer_max_xy VALUE="{ params.PRINT_MAX | default(None, true) }"

    BED_MESH_CALIBRATE

    SET_GCODE_VARIABLE MACRO=START_PRINT VARIABLE=first_layer_min_xy VALUE=None
    SET_GCODE_VARIABLE MACRO=START_PRINT VARIABLE=first_layer_max_xy VALUE=None

    M117 Clean nozzle now!
    G0 X{ printer.toolhead.axis_maximum.x/4 } Y0 Z50 F{ travel_speed }
    G4 P10000

    M117 Calibrating Probe/Nozzle offset...
    CARTOGRAPHER_TOUCH

    # Start heating extruder for real
    M117 Heating extruder...
    M104 S{ extruder_temp }

    # Move to prime area to try to counter oozing
    G1 X0 Y0 F{ travel_speed }

    # Wait for extruder to heat up
    M109 S{ extruder_temp }

    # @todo beep
    {% if semm %}
        M400
        PAUSE
        M117 Load starting filament
    ## {% else %}
    ##     M117 clean ooze now!
    ##     G4 P5000
    {% endif %}

    PRIME_LINE

    {% if 'filament_switch_sensor lgx' in printer.configfile.settings %}
        SET_FILAMENT_SENSOR SENSOR=lgx ENABLE=1
    {% endif %}

    {% if ratOS.skew_profile is defined %}
        SKEW_PROFILE LOAD={ ratOS.skew_profile }
    {% endif %}

    M117 Printing...

    M83
    G92 E0

#####
# END PRINT MACROS
# Call this from your slicer (custom g-code).
# Read more here: https://rat-rig.github.io/V-CoreOS/#/slicers
#####

# The end_print macro is also called from CANCEL_PRINT.
[gcode_macro END_PRINT]
gcode:
    {% set ratOS = printer["gcode_macro RatOS"] %}

    # Calculate safe Z position
    {% set max_z = printer.toolhead.axis_maximum.z|float %}
    {% set act_z = printer.toolhead.position.z|float %}
    {% if act_z < (max_z - 2.0) %}
        {% set z_safe = 2.0 %}
    {% else %}
        {% set z_safe = max_z - act_z %}
    {% endif %}

    # Extruder heater off
    M104 S0

    # Bed heater off
    M140 S0

    # Relative positioning
    G91

    # Retract the filament a bit before lifting the nozzle.
    G1 E-2 F3600

    # Move to safe Z position
    G0 Z{ z_safe } F3600

    # Retract filament even more
    G1 E-2 F3600

    _PARK LOCATION=back
    {% if act_z < max_z/2 %}
        G90
        G0 Z{ max_z/2 } F3600
    {% endif %}

    # Clear skew profile if any was loaded.
    {% if ratOS.skew_profile is defined %}
      SET_SKEW CLEAR=1
    {% endif %}

    # Steppers off
    M84

    # Part cooling fan off
    M107
    M117 Done.
